/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var JRC = ee.Image("JRC/GSW1_1/GlobalSurfaceWater"),
    DEM = ee.Image("USGS/SRTMGL1_003"),
    COPERNICUS = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/


var map = ui.Map();

var years = ee.List.sequence(1, 5);
var ndvi_pal = ['#FF0000', '#FBFF00', '#357100'];
var dem_pal = ['#33E6FF', '#734F00'];
var jrc_pal = ['ffffff', 'ffbbbb', '0000ff'];
var filtro = ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5);
var cloudBitMask = ee.Number(2).pow(10).int();
var cirrusBitMask = ee.Number(2).pow(11).int();

function maskS2Clouds(image) {
  var qa = image.select('QA60');
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask);
}

function addNDVI(image) {
  return image.addBands(image.normalizedDifference(['B8', 'B4']).rename('NDVI'));
}

function analyze(geometry) {
  var s2Collection = COPERNICUS.filterBounds(geometry).filter(filtro);
  var s2CloudMasked = s2Collection.map(maskS2Clouds);
  var unfNDVI = s2CloudMasked.map(addNDVI).select(['NDVI']);

  /* NDVI P90 HISTORICO TOTAL*/
  var NDVI_max = unfNDVI.reduce(ee.Reducer.percentile([90])).clip(geometry);
  map.addLayer(NDVI_max, {min: 0.4, max: 0.8, palette: ndvi_pal}, 'NDVI_p90');
  
  /* NDVI P90 POR CAMPAÑA*/
  var campaigns =  ee.ImageCollection(years.map(function (y){
    var date_ini = ee.Date.fromYMD(2014, 05, 15).advance(y, 'year');
    var date_end = ee.Date.fromYMD(2015, 05, 15).advance(y, 'year');
    var NDVI_p90 = unfNDVI.filterDate(date_ini, date_end).reduce(ee.Reducer.percentile([90])).clip(geometry);
    return NDVI_p90;
  }));

  var listOfImages = campaigns.toList(campaigns.size());
  for (var i = 0; i < campaigns.size().getInfo(); i ++){
    var img = ee.Image(listOfImages.get(i));
    var campaign = (2014 + i) + "-" + (2015 + i);
    map.addLayer(img, {min: 0.4, max: 0.8, palette: ndvi_pal}, 'NDVI_p90_' + campaign);
    Export.image.toDrive({image: img, folder: 'earth_engine', description: 'NDVI_p90_' + campaign, scale: 10, region: geometry});
  }
  
  /* NDVI P10 HISTORICO TOTAL*/
  var NDVI_min= unfNDVI.reduce(ee.Reducer.percentile([10])).clip(geometry);
  map.addLayer(NDVI_min, {min: 0, max: 0.3, palette: ndvi_pal}, 'NDVI_p10');
  Export.image.toDrive({image: NDVI_min, folder: 'earth_engine', description: 'NDVI_p10', scale: 10, region: geometry});

  /* DEM */
  var elevation = DEM.select('elevation').clip(geometry);
  var p90_dem = ee.Number(elevation.reduceRegion({reducer: ee.Reducer.percentile([90]), geometry: geometry, maxPixels: 1e9, scale: 30}).get('elevation'));
  var p10_dem = ee.Number(elevation.reduceRegion({reducer: ee.Reducer.percentile([10]), geometry: geometry, maxPixels: 1e9, scale: 30}).get('elevation'));
  map.addLayer(elevation, {min: p10_dem.getInfo(), max: p90_dem.getInfo(), palette: dem_pal}, 'DEM');
  Export.image.toDrive({image: elevation, folder: 'earth_engine', description: 'DEM', scale: 30,region: geometry});

  /* JRC */
  var occurrence = JRC.select('occurrence').clip(geometry);
  var p90_jrc = ee.Number(occurrence.reduceRegion({reducer: ee.Reducer.percentile([90]), geometry: geometry, maxPixels: 1e9, scale: 30}).get('occurrence'));
  var p10_jrc = ee.Number(occurrence.reduceRegion({reducer: ee.Reducer.percentile([10]), geometry: geometry, maxPixels: 1e9, scale: 30}).get('occurrence'));
  map.addLayer(occurrence, {min: p10_jrc.getInfo(), max: p90_jrc.getInfo(), palette: jrc_pal}, 'JRC');
  Export.image.toDrive({image: occurrence, folder: 'earth_engine', description: 'JRC', scale: 30,region: geometry});

}

map.setCenter(-59,-37, 6);
map.setOptions("HYBRID");

map.drawingTools().setShown(true);
map.drawingTools().setDrawModes(['polygon','rectangle']);

var label = ui.Label('Análisi de tierras');
var btnClear = ui.Button('Limpiar',function(){
  map.clear();
  map.drawingTools().clear();
  map.setOptions("HYBRID");
});
var btnAnalyze = ui.Button('Analizar',function(){
  if (map.drawingTools().layers().length() > 0) {
    analyze(map.drawingTools().layers().get(0).toGeometry());
  } else {
    print('Dibuje un poligono para analizar');
  }
});
var panel = ui.Panel({
  widgets: [label,btnAnalyze,btnClear],
  layout: ui.Panel.Layout.flow('vertical'),
  style: {position: 'bottom-left'}
});

ui.root.clear();
ui.root.add(panel);
ui.root.add(map);
