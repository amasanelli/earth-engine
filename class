/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sent2img = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Manually created polygons.
var forest1 = ee.Geometry.Rectangle(-63.0187, -9.3958, -62.9793, -9.3443);
var forest2 = ee.Geometry.Rectangle(-62.8145, -9.206, -62.7688, -9.1735);
var nonForest1 = ee.Geometry.Rectangle(-62.8161, -9.5001, -62.7921, -9.4486);
var nonForest2 = ee.Geometry.Rectangle(-62.6788, -9.044, -62.6459, -8.9986);

// Make a FeatureCollection from the hand-made geometries.
var polygons = ee.FeatureCollection([
  ee.Feature(nonForest1, {'class': 0}),
  ee.Feature(nonForest2, {'class': 0}),
  ee.Feature(forest1, {'class': 1}),
  ee.Feature(forest2, {'class': 1}),
]);

function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = ee.Number(2).pow(10).int();
  var cirrusBitMask = ee.Number(2).pow(11).int();
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);
}

var greenness = ee.Array([[-0.0635,-0.1128,-0.1680,-0.3480,-0.3303,0.0852,0.3302,0.3165,0.0467,-0.0009,-0.4578,-0.4064,0.3625]]);
var loopsteps = ee.List.sequence(0,11,1);
var start = ee.Date.fromYMD(2017,3,1);

var composites = ee.ImageCollection.fromImages(loopsteps.map(function(i){
  var since = start.advance(ee.Number(i),'month');
  var to = start.advance(ee.Number(i).add(1),'month');

  var image = ee.Image(sent2img
    .filterDate(since,to)
    .filterBounds(polygons)
    .map(maskS2clouds)
    .median()
    .select(["B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11","B12","B8A"])
  );

  var arrayImage2D = image.toArray().toArray(1);
  var greennessArrayImage = ee.Image(greenness).matrixMultiply(arrayImage2D);
  var greennessImage = greennessArrayImage.arrayGet([0, 0]);
  return greennessImage.rename(ee.String('gb').cat(ee.String(ee.Number(i).int())));

})).toBands();

print(composites);

var label = 'class';
var bands = composites.bandNames();

var training = composites.select(bands).sampleRegions({
  collection: polygons,
  properties: [label],
  scale: 30
});
var trained = ee.Classifier.randomForest().train(training, label, bands);
var classified = composites.select(bands).classify(trained);

var trainAccuracy = trained.confusionMatrix();

print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());
Map.addLayer(classified,{min: 0, max: 2, palette: ['red', 'green', 'blue']},'classification');

Map.setCenter(-62.836, -9.2399, 9);
